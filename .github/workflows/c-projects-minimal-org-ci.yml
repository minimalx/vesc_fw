name: C Project CI/CD

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  version-and-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Required for tag history

      - name: Calculate Semantic Version
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          format: |
            ${major}.${minor}.${patch}-prerelease.${increment}

      # ðŸ§ª Set version for PR builds
      - name: Set prerelease version (PRs)
        if: github.event_name == 'pull_request'
        run: echo "VERSION=${{ steps.version.outputs.version }}" >> $GITHUB_ENV

      # âœ… Clean version + tagging logic for main
      - name: Set clean version (main)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "VERSION=${{ steps.version.outputs.version_tag }}" >> $GITHUB_ENV

      - name: Create Git tag on main
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag $VERSION
          git push origin $VERSION

      # ðŸ’¡ Inject version into your build
      - name: Inject version into build
        run: |
          echo "Build version: $VERSION"
          echo "$VERSION" > build/version.txt


  build:
    name: Lint
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: read
      # To report GitHub Actions status checks
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # super-linter needs the full git history to get the
          # list of files that changed across commits
          fetch-depth: 0

      - name: Super-linter
        uses: super-linter/super-linter@v8.0.0 # x-release-please-version
        env:
          # To report GitHub Actions status checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}