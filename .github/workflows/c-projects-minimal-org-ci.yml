name: C Project CI/CD

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  version-and-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed to access previous tags

      - name: Calculate Version (PR or Push)
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          enable_prerelease_mode: ${{ github.event_name == 'pull_request' }}
          version_format: "${major}.${minor}.${patch}${prerelease}"

      - name: Set VERSION env var
        run: echo "VERSION=${{ steps.version.outputs.version }}" >> $GITHUB_ENV

      - name: Print Version (for debug/logging)
        run: |
          echo "Computed version: $VERSION"

      - name: Generate version.h (C version)
        run: |
          MAJOR=${VERSION%%.*}
          REMAINDER=${VERSION#*.}
          MINOR=${REMAINDER%%.*}
          PATCH=${REMAINDER#*.}
          PATCH=${PATCH%%-*}
          DATE=$(date -u +"%Y-%m-%d")
          AUTHOR="${{ github.actor }}"

          {
            echo "#ifndef VERSION_H"
            echo "#define VERSION_H"
            echo ""
            echo "#define VERSION_MAJOR   $MAJOR"
            echo "#define VERSION_MINOR   $MINOR"
            echo "#define VERSION_PATCH   $PATCH"
            echo ""
            echo "static const char VERSION_STR[]      = \"v$VERSION\";"
            echo "static const char VERSION_DATE_STR[] = \"$DATE\";"
            echo "static const char VERSION_AUTHOR[]   = \"$AUTHOR\";"
            echo ""
            echo "#endif // VERSION_H"
          } > version.h

          cat version.h


      # 🏷️ Tag and push only on merge to main
      - name: Create Git Tag on main
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "v$VERSION"
          git push origin "v$VERSION"

  formatting-check:
      name: Formatting Check
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Get changed C/C++/Proto files in PR
          id: changed-files
          run: |
            git fetch origin ${{ github.base_ref }}
            FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '\.(c|cc|cpp|h|proto)$' || true)

            # Convert to space-separated list
            FILES=$(echo "$FILES" | tr '\n' ' ')
            
            # Safely write to output with proper quoting
            printf "files=%s\n" "$FILES" >> $GITHUB_OUTPUT

        - name: Show changed files
          run: echo "${{ steps.changed-files.outputs.files }}"

        - name: Run clang-format style check (only if files changed)
          if: ${{ steps.changed-files.outputs.files != '' }}
          uses: jidicula/clang-format-action@v4.15.0
          with:
            clang-format-version: '20'
            check-path: ${{ steps.changed-files.outputs.files }}
            fallback-style: 'LLVM'

          