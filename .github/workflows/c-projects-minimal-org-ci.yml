name: C Project CI/CD

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.expose.outputs.version }}
      version_tag: ${{ steps.version.outputs.version_tag }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed to access previous tags

      - name: Calculate Version
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          enable_prerelease_mode: ${{ github.event_name == 'pull_request' }}
          version_format: ${{ github.ref == 'refs/heads/main' && '${major}.${minor}.${patch}' || '${major}.${minor}.${patch}-dev${increment}' }}

      - name: Export Version to Environment
        run: |
          echo "VERSION=${{ steps.version.outputs.version }}"
          echo "VERSION_TAG=${{ steps.version.outputs.version_tag }}"
          echo "VERSION=${{ steps.version.outputs.version }}" >> $GITHUB_ENV
          echo "VERSION_TAG=${{ steps.version.outputs.version_tag }}" >> $GITHUB_ENV

      - name: Expose version as output
        id: expose
        run: |
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        env:
          VERSION: ${{ steps.version.outputs.version }}

      - name: Generate version.h (C version)
        run: |
          MAJOR=${VERSION%%.*}
          REMAINDER=${VERSION#*.}
          MINOR=${REMAINDER%%.*}
          PATCH=${REMAINDER#*.}
          PATCH=${PATCH%%-*}
          DATE=$(date -u +"%Y-%m-%d")
          AUTHOR="${{ github.actor }}"

          {
            echo "#ifndef VERSION_H"
            echo "#define VERSION_H"
            echo ""
            echo "#define VERSION_MAJOR   $MAJOR"
            echo "#define VERSION_MINOR   $MINOR"
            echo "#define VERSION_PATCH   $PATCH"
            echo ""
            echo "static const char VERSION_STR[]      = \"v$VERSION\";"
            echo "static const char VERSION_DATE_STR[] = \"$DATE\";"
            echo "static const char VERSION_AUTHOR[]   = \"$AUTHOR\";"
            echo ""
            echo "#endif // VERSION_H"
          } > version.h

          cat version.h

      - name: Create Git Tag on main
        env:
          PAT: ${{ secrets.ALL_SCOPE_ACTIONS_BOT_PAT }}
          VERSION_TAG: ${{ env.VERSION_TAG }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Set authenticated remote
          git remote set-url origin https://x-access-token:${PAT}@github.com/${{ github.repository }}

          # Create and push tag
          git tag "$VERSION_TAG"
          git push origin "$VERSION_TAG"

  formatting-check:
      name: Formatting Check
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Add LLVM apt repo
          run: |
            sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
            sudo apt-get install -y clang-format-20

        - name: Verify clang-format version
          run: clang-format-20 --version

        - name: Get changed C/C++/Proto files in PR
          id: changed-files
          run: |
            git fetch origin ${{ github.base_ref }}
            
            # Get changed (but not deleted) files with specific extensions
            FILES=$(git diff --diff-filter=d --name-only origin/${{ github.base_ref }}...HEAD | grep -E '\.(c|cc|cpp|h|proto)$' || true)

            # Convert to space-separated list
            FILES=$(echo "$FILES" | tr '\n' ' ')

            # Safely write to GitHub output
            printf "files=%s\n" "$FILES" >> $GITHUB_OUTPUT


        - name: Show changed files
          run: echo "${{ steps.changed-files.outputs.files }}"

        - name: Run clang-format style check (manually)
          if: ${{ steps.changed-files.outputs.files != '' }}
          run: |
            echo "Checking formatting for changed files..."
            for file in ${{ steps.changed-files.outputs.files }}; do
              echo "Checking: $file"
              clang-format-20 --dry-run --Werror "$file"
            done

  build:
      name: Build and Upload Firmware
      runs-on: ubuntu-latest
      needs:
        - version
        - formatting-check

      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Build firmware
          run: |
            make arm_sdk_install
            make fw_60_mk6_hp

        - name: Rename .bin and .elf files to include version
          run: |
            VERSION=${{ needs.version.outputs.version }}
            for file in build/60_mk6_hp/*.{bin,elf}; do
              ext="${file##*.}"
              base="$(basename "$file" .$ext)"
              mv "$file" "build/60_mk6_hp/${base}_v${VERSION}.${ext}"
            done

        - name: List build outputs
          run: ls -lh build/60_mk6_hp/

        - name: Upload .bin and .elf artifacts
          uses: actions/upload-artifact@v4
          with:
            name: firmware-artifacts
            path: |
              build/60_mk6_hp/*.bin
              build/60_mk6_hp/*.elf