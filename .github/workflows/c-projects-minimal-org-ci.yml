name: C Project CI/CD

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  version-and-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed to access previous tags

      - name: Calculate Version (PR or Push)
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          enable_prerelease_mode: ${{ github.event_name == 'pull_request' }}
          version_format: "${major}.${minor}.${patch}${prerelease}"

      - name: Set VERSION env var
        run: echo "VERSION=${{ steps.version.outputs.version }}" >> $GITHUB_ENV

      - name: Print Version (for debug/logging)
        run: |
          echo "Computed version: $VERSION"

      - name: Generate version.h
        run: |
          # Extract version components
          MAJOR=${VERSION%%.*}
          REMAINDER=${VERSION#*.}
          MINOR=${REMAINDER%%.*}
          PATCH=${REMAINDER#*.}
          PATCH=${PATCH%%-*}  # Strip prerelease if exists

          # Get current date (UTC)
          DATE=$(date -u +"%Y-%m-%d")

          # Use GitHub actor email (fallback if not set)
          AUTHOR="${{ github.actor }}"

          # Write version.h
          {
            echo "#define VERSION_STR     \"v$VERSION\""
            echo "#define VERSION_MAJOR   $MAJOR"
            echo "#define VERSION_MINOR   $MINOR"
            echo "#define VERSION_PATCH   $PATCH"
            echo "#define VERSION_DATE_STR \"$DATE\""
            echo "#define VERSION_AUTHOR  \"$AUTHOR\""
          } > version.h

          cat version.h


      # üè∑Ô∏è Tag and push only on merge to main
      - name: Create Git Tag on main
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "v$VERSION"
          git push origin "v$VERSION"


  build:
    name: Lint
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: read
      # To report GitHub Actions status checks
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # super-linter needs the full git history to get the
          # list of files that changed across commits
          fetch-depth: 0

      - name: Super-linter
        uses: super-linter/super-linter@v8.0.0 # x-release-please-version
        env:
          # To report GitHub Actions status checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}